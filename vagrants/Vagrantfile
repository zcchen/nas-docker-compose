# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.vm.provider :libvirt do |libvirt|
    libvirt.cpus = 2
    #libvirt.host = 'localhost'
    #libvirt.driver = 'kvm'
    #libvirt.uri = 'qemu:///system'
    libvirt.nested = true
    libvirt.memory = 2048
  end

  config.vm.box = "debian/buster64"
  config.vm.synced_folder "../", "/vagrant", nfs_version: "3"

  config.hostmanager.enable = false
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = false

  config.vm.define "nas-server" do |nas|
    nas.vm.hostname = "nas-server"
    nas.vm.network :private_network, ip: "192.168.100.100"
    nas.hostmanager.aliases = %w(traefik.nas-server whoami.nas-server)
  end

  config.vm.define "nas-local" do |nas|
    nas.vm.hostname = "nas-local"
    nas.vm.network :private_network, ip: "192.168.100.101"
    nas.hostmanager.aliases = %w(*.nas-local)
  end


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get install -y avahi-daemon libnss-mdns \
      docker.io make python3-pip
    apt clean -y
    pip3 install docker-compose
    sudo usermod --append --groups docker vagrant
    export PATH="/home/vagrant/.local/bin:$PATH"
  SHELL

  config.vm.provision :hostmanager

end
